package ui;import logic.*;import logic.enums.CheckType;import logic.enums.Difficulty;import logic.enums.Symbol;import logic.save.GameSave;import logic.save.GameSaveUtil;import static logic.enums.CheckType.*;import static logic.enums.ReturnTurno.NOT_FINISHED;import static logic.enums.ReturnTurno.TIE;import static logic.enums.Symbol.*;import static ui.UIUtils.*;import javax.swing.*;import javax.swing.border.LineBorder;import java.awt.*;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Objects;import java.util.concurrent.atomic.AtomicInteger;/** * Main UI class for the Tic Tac Toe game application */public class UiApplication {    /**     * AI player instance     */    private static Ai ai = new Ai();    /**     * Human player instance     */    private static Player player = new Player();    /**     * Represents the current mode configuration for the application.     * The mode is of type {@link CheckType} and determines the type of validation     * or interaction being conducted within the application.     * Possible values for the mode include specific predefined types such as     * {@code HORIZONTAL}, {@code VERTICALE}, {@code LINEAR}, {@code DIAGONALE},     * {@code ANTIDIAGONALE}, {@code OBLIQUO}, or {@code ALL}.     * The default configuration for this variable is set to {@code ALL}.     * This configuration impacts the behavior of the application logic.     */    private static CheckType mode = ALL;    /**     * Main application window     */    private static JFrame frame;    /**     * Initializes and starts the game UI     */    public void start() {        copyright();        frame = new JFrame("Tick Tack Toe");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(getX(100), getY(100));        frame.setLocationRelativeTo(null);        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        frame.setLayout(null);        menuPanel();        gamePanel(false);        frame.setVisible(true);    }    /**     * Creates and configures the menu panel with difficulty and player settings     */    public static void menuPanel() {        // Load saved game data        var save = new GameSave();        try {            save = GameSaveUtil.caricaDaFile("save.json");        } catch (IOException e) {            System.out.println("errore nel caricamento dati");        } catch (NullPointerException e) {            System.out.println("dati nulli");        }        player = save.getPlayer() == null ?                new Player("Player 1", X, 0) : save.getPlayer();        ai = save.getAi() == null ?                new Ai(Difficulty.EASY, O, 0) : save.getAi();        // Player settings panel        var panelPlayer = new JPanel();        panelPlayer.setBounds(getX(0), getY(0), getX(25), getY(40));        panelPlayer.setBackground(Color.gray);        panelPlayer.setLayout(new GridLayout(7, 2, 4, 4));        panelPlayer.setBorder(new LineBorder(Color.DARK_GRAY, 2));        //Row 1        panelPlayer.add(new JLabel("Nome giocatore"));        var areaNome = new JTextField(player.getNome());        panelPlayer.add(areaNome);        //Row 2        panelPlayer.add(new JLabel("inserisci stile"));        //symbol style        String[] style = {"normale", "tipo1", "tipo2"};        var comboStyle = new JComboBox<>(style);        panelPlayer.add(comboStyle);        //Row 3        panelPlayer.add(new JLabel("Simbolo"));        // Symbol selection        var panelSimbolo = new JPanel(new GridLayout(2, 1, 4, 4));        var comboPlayer = new JComboBox<>(new Symbol[]{player.getSimbolo(), player.getSimbolo() == X ? O : X});        var savebtnS = new JButton();        savebtnS.setText("Salva player");        savebtnS.addActionListener(e -> {            try {                var simbolo = (Symbol) comboPlayer.getSelectedItem();                player.setNome(areaNome.getText());                player.setSimbolo(simbolo);                player.setSymbolIndex(comboStyle.getSelectedIndex());                ai.setSimbolo(simbolo == X ? O : X);                ai.setSymbolIndex(comboStyle.getSelectedIndex());                GameSaveUtil.salvaSuFile(new GameSave(player, ai), "save.json");                menuPanel();                gamePanel(true);            } catch (IOException ex) {                throw new RuntimeException(ex);            }            menuPanel();        });        panelSimbolo.add(comboPlayer);        panelSimbolo.add(savebtnS);        panelPlayer.add(panelSimbolo);        //Row 4        panelPlayer.add(new JLabel("Vittorie"));        panelPlayer.add(new JLabel(String.valueOf(player.getVittorie())));        //Row 5        panelPlayer.add(new JLabel("Sconfitte"));        panelPlayer.add(new JLabel(String.valueOf(player.getSconfitte())));        //Row 6        panelPlayer.add(new JLabel("Pareggi"));        panelPlayer.add(new JLabel(String.valueOf(player.getPareggi())));        //Row 7        panelPlayer.add(new JLabel(""));        //button for reset        var reset = new JButton("Reset");        reset.addActionListener(e -> {            try {                player.setVittorie(0);                player.setSconfitte(0);                player.setPareggi(0);                GameSaveUtil.salvaSuFile(new GameSave(player, ai), "save.json");                menuPanel();                panelPlayer.revalidate();                panelPlayer.repaint();            } catch (IOException ex) {                throw new RuntimeException(ex);            }catch (NullPointerException ex){                System.out.println("dati nulli in reset");            }catch (Exception ex){                System.out.println("errore in reset");            }        });        panelPlayer.add(reset);        frame.add(panelPlayer);    }    /**     * Creates and configures the main game board panel     */    public static void gamePanel(boolean hasChangedSymbol) {        var panel = new JPanel();        panel.removeAll();        panel.revalidate();        panel.setBounds(getX(25), getY(0), getX(55), getY(100));        panel.setBackground(Color.white);        panel.setLayout(null);        // Panel impostazioni difficoltà        var panelDiff = new JPanel();        panelDiff.setBounds(getX(0), getY(10), getX(25), getY(10));        panelDiff.setBackground(Color.gray);        panelDiff.setLayout(new GridLayout(1, 3, 4, 4));        panelDiff.setBorder(new LineBorder(Color.DARK_GRAY, 2));        var diff = new JLabel("Difficoltà attiva: " + ai.getDifficulty().toString());        diff.setBounds(getX(0), getY(30), getX(30), getY(10));        panel.add(diff);        var labelDiff = creaLabel("Difficoltà", 0, 10, 100, 10, 12, Color.black);        panelDiff.add(labelDiff);        var comboDiff = new JComboBox<>(Difficulty.values());        comboDiff.setBounds(getX(0), getY(10), getX(100), getY(10));        panelDiff.add(comboDiff);        var salva = new JButton("Salva");        salva.setText("Salva");        salva.addActionListener(e -> {            ai = new Ai((Difficulty) comboDiff.getSelectedItem(), Symbol.X, player.getSymbolIndex());            comboDiff.setSelectedItem(ai.getDifficulty());            diff.setText("Difficoltà attiva: " + ai.getDifficulty().toString());            try {                GameSaveUtil.salvaSuFile(new GameSave(player, ai), "save.json");            } catch (IOException ex) {                throw new RuntimeException(ex);            }        });        panelDiff.add(salva);        panel.add(panelDiff);        // Modalità di vincita        var moda = new JLabel("Modalità di vincita: " + mode + " " +                (mode == ALL ? "(normale tris)" : "(tris modificato)"));        moda.setBounds(getX(0), getY(20), getX(30), getY(10));        panel.add(moda);        var panelRule = new JPanel(new GridLayout(2, 2, 4, 4));        panelRule.setBounds(getX(0), getY(0), getX(30), getY(10));        panelRule.add(new JLabel("Scegli la modalità di vincita"));        var comboRule = new JComboBox<>(new CheckType[]{ALL, HORIZONTAL, VERTICALE, LINEAR, DIAGONALE, ANTIDIAGONALE, OBLIQUO});        panelRule.add(comboRule);        var salvaModalita = new JButton("Applica");        salvaModalita.addActionListener(e -> {            mode = (CheckType) comboRule.getSelectedItem();            moda.setText("Modalità di vincita: " + Objects.requireNonNull(mode) +                    (mode == ALL ? "(normale tris)" : "(tris modificato)"));        });        panelRule.add(salvaModalita);        panel.add(panelRule);        // Slider per la dimensione della tabella        var panelTable = new JPanel(new GridLayout(1, 2, 4, 4));        panelTable.setBounds(getX(25), getY(10), getX(30), getY(10));        panelTable.setBackground(Color.gray);        panelTable.add(new JLabel("Aumenta/Diminuisci la tabella di gioco: "));        var slider = new JSlider(2, 10, 3);        slider.setMajorTickSpacing(2);        slider.setMinorTickSpacing(1);        slider.setPaintTicks(true);        slider.setPaintTrack(true);        slider.setSnapToTicks(true);        slider.setPaintLabels(true);        AtomicInteger sizeTable = new AtomicInteger(slider.getValue());        panelTable.add(slider);        panel.add(panelTable);        // Pannello della tabella di gioco        var panelGioco = new JPanel();        panelGioco.setBounds(getX(8), getY(40), getX(40), getY(50));        panelGioco.setBackground(Color.gray);        panelGioco.setBorder(new LineBorder(Color.DARK_GRAY, 2));        panel.add(panelGioco);        // Crea la tabella iniziale        creaTabellaGioco(panelGioco, sizeTable.get(), hasChangedSymbol);        // Listener per lo slider: aggiorna la tabella dinamicamente        slider.addChangeListener(e -> {            sizeTable.set(slider.getValue());            creaTabellaGioco(panelGioco, sizeTable.get(), false);        });        // Aggiungi il pannello al frame principale        frame.add(panel);    }    private static void creaTabellaGioco(JPanel panelGioco, int size, boolean hasChangedSymbol) {        // Rimuovi tutte le celle esistenti        panelGioco.removeAll();        panelGioco.setLayout(new GridLayout(size, size, 4, 4));        // Lista delle caselle        List<Casella> caselle = new ArrayList<>();        System.out.println(ai.getDifficulty());        // Inizializza l'AI con il simbolo opposto del giocatore se necessario        ai = new Ai(ai.getDifficulty(), player.getSimbolo() == Symbol.X ? Symbol.O : Symbol.X, player.getSymbolIndex());        if (hasChangedSymbol) {            GameFunctions.clean(caselle); // Resetta lo stato        }        // Crea le celle della griglia        for (int i = 0; i < size * size; i++) {            var casella = new Casella();            casella.addActionListener(e -> {                // Se è già usata, esce                if (casella.isUsata() || casella.getSimbolo() != Symbol.EMPTY) {                    return;                }                // Seleziona la casella con il simbolo del giocatore                casella.seleziona(player.getSimbolo(), player.getSymbolIndex());                // Esegui il turno dell'AI                var resultPlay = GameFunctions.turnoAi(player, ai, caselle, mode);                // Controlla se la partita è terminata in parità                if (GameFunctions.isFull(caselle) == TIE && resultPlay == NOT_FINISHED) {                    resultPlay = TIE;                }                // Gestione dello stato del gioco                switch (resultPlay) {                    case P1 -> {                        player.incrementaVittorie();                        mostraInformazioni("Gioco terminato", "Hai vinto!");                    }                    case P2 -> {                        player.incrementaSconfitte();                        mostraInformazioni("Gioco terminato", "Hai perso!");                    }                    case TIE -> {                        player.incrementaPareggi();                        mostraInformazioni("Gioco terminato", "Hai pareggiato!");                    }                    case NOT_FINISHED -> {return;}                }                // Salva lo stato del gioco e ritorna al menu                try {                    GameSaveUtil.salvaSuFile(new GameSave(player, ai), "save.json");                    menuPanel();                    GameFunctions.clean(caselle); // Pulisci la tabella                } catch (IOException ex) {                    throw new RuntimeException("Errore durante il salvataggio!", ex);                }            });            // Aggiungi la casella alla lista e al pannello            caselle.add(casella);            panelGioco.add(casella);        }        // Ricostruisci il layout del pannello        panelGioco.revalidate();        panelGioco.repaint();    }}